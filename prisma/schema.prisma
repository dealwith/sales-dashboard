generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?  @unique
  phone     String?
  company   String?
  position  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leads     Lead[]
  deals     Deal[]
  calls     Call[]
  notes     Note[]
}

model Lead {
  id        String     @id @default(cuid())
  title     String
  status    LeadStatus @default(NEW)
  source    String?
  value     Float?
  priority  Priority   @default(MEDIUM)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contactId String
  
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  deal      Deal?
  notes     Note[]
}

model Deal {
  id           String     @id @default(cuid())
  title        String
  stage        DealStage  @default(QUALIFICATION)
  value        Float
  probability  Int        @default(50)
  expectedClose DateTime?
  actualClose   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contactId    String
  leadId       String?    @unique
  
  contact      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  lead         Lead?   @relation(fields: [leadId], references: [id])
  calls        Call[]
  notes        Note[]
}

model Call {
  id           String    @id @default(cuid())
  twilioCallSid String?   @unique
  direction    String
  duration     Int?      
  status       CallStatus @default(INITIATED)
  recordingUrl String?
  transcript   String?
  outcome      CallOutcome?
  startTime    DateTime
  endTime      DateTime?
  createdAt    DateTime  @default(now())
  contactId    String
  dealId       String?
  
  contact      Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  deal         Deal?   @relation(fields: [dealId], references: [id])
  notes        Note[]
}

model Note {
  id        String   @id @default(cuid())
  content   String
  type      NoteType @default(GENERAL)
  createdAt DateTime @default(now())
  contactId String?
  leadId    String?
  dealId    String?
  callId    String?
  
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  lead      Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  deal      Deal?    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  call      Call?    @relation(fields: [callId], references: [id], onDelete: Cascade)
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum DealStage {
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  CLOSING
  WON
  LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallStatus {
  INITIATED
  RINGING
  IN_PROGRESS
  COMPLETED
  BUSY
  NO_ANSWER
  FAILED
}

enum CallOutcome {
  CONNECTED
  LEFT_VOICEMAIL
  BUSY
  NO_ANSWER
  CALL_BACK_REQUESTED
  NOT_INTERESTED
  INTERESTED
  MEETING_SCHEDULED
}

enum NoteType {
  GENERAL
  CALL_SUMMARY
  MEETING_NOTES
  FOLLOW_UP
  REMINDER
}
